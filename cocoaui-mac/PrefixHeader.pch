/*
 Copyright (c) 2014 ideawu. All rights reserved.
 Use of this source code is governed by a license that can be
 found in the LICENSE file.
 
 @author:  ideawu
 @website: http://www.cocoaui.com/
 */

#ifndef IKit_PrefixHeader_pch
#define IKit_PrefixHeader_pch

#define VER_NUM  "1.0.0"
#define COPYRIGHT "Copyright(c)2015-2018 CocoaUI. All rights reserved."

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

#ifdef __cplusplus
#include "log.h"
#endif


#ifdef __OBJC__
#import <Foundation/Foundation.h>

#import <AppKit/AppKit.h>
#import "TargetConditionals.h"

#import "UILabel.h"

#define UIView NSView
#define UIImageView NSImageView

#define NSStringFromCGRect NSStringFromRect
#	define UIImage NSImage
#	define UIEdgeInsets NSEdgeInsets
#	define UIEdgeInsetsZero NSEdgeInsetsZero
#	define UIViewController NSViewController
#	define UIColor NSColor
#	define UIFont NSFont
#	define UIResponder NSResponder

inline static CGContextRef UIGraphicsGetCurrentContext(){
	return NSGraphicsContext.currentContext.graphicsPort;
}

inline static NSData* UIImagePNGRepresentation(NSImage *image){
	[image lockFocus];
	NSBitmapImageRep *bitmapRep = [[NSBitmapImageRep alloc] initWithFocusedViewRect:NSMakeRect(0, 0, image.size.width, image.size.height)];
	[image unlockFocus];
	NSDictionary *attrs = [[NSDictionary alloc] init];
	return [bitmapRep representationUsingType:NSPNGFileType properties:attrs];
}

inline static CGRect UIEdgeInsetsInsetRect(CGRect rect, UIEdgeInsets insets) {
	rect.origin.x    += insets.left;
	rect.origin.y    += insets.top;
	rect.size.width  -= (insets.left + insets.right);
	rect.size.height -= (insets.top  + insets.bottom);
	return rect;
}


#define L_MYLOG(level, fmt, args...) \
	my_log((level @" %@(%d): " fmt), [@(__FILE__) lastPathComponent],  __LINE__, ##args)

#undef log_trace
#undef log_debug
#undef log_info
#undef log_error

#ifdef DEBUG
#	define VERSION  VER_NUM "(for macOS development only)"
#	define log_trace(...) L_MYLOG(@"[TRACE]", __VA_ARGS__)
#	define log_debug(...) L_MYLOG(@"[DEBUG]", __VA_ARGS__)
#else
#	define VERSION  VER_NUM "(for macOS production)"
#	define log_trace(...)
#	define log_debug(...)
#endif

#define log_info(...)  L_MYLOG(@"[INFO] ", __VA_ARGS__)
#define log_error(...) L_MYLOG(@"[ERROR]", __VA_ARGS__)


inline
static void my_log(NSString *fmt, ...){
	NSDateFormatter *f = [[NSDateFormatter alloc] init];
	[f setDateFormat:@"yyyy-MM-dd HH:mm:ss.SSS"];
	NSString *time = [f stringFromDate:[NSDate date]];
	
	va_list args;
	va_start(args, fmt);
	NSString *msg = [[NSString alloc] initWithFormat:fmt arguments:args];
	va_end(args);
	
	printf("%s %s\n", time.UTF8String, msg.UTF8String);
}

#endif // end __OBJC__

#endif
